{
  "for": {
    "prefix": "for",
    "body": [
      "for (${size_t} ${i} = ${1:0}; ${i} < ${2:length}; ${i}++)",
      "{",
      "\t$3",
      "}"
    ]
  },
  "forr": {
    "prefix": "forr",
    "body": [
      "for (int ${i} = ${1:length} - 1; ${i} >= ${2:0}; ${i}--)",
      "{",
      "\t$3",
      "}"
    ]
  },
  "do": {
    "prefix": "do",
    "body": [
      "do",
      "{",
      "\t$1",
      "} while($2);"
    ]
  },
  "while": {
    "prefix": "while",
    "body": [
      "while ($1)",
      "{",
      "\t$2",
      "}"
    ]
  },
  "foreach": {
    "prefix": "foreach",
    "body": [
      "for(auto ${var} : ${collection_to_loop})",
      "{",
      "\t$1",
      "}"
    ]
  },
  "if": {
    "prefix": "if",
    "body": [
      "if ($1)",
      "{",
      "\t$2",
      "}"
    ]
  },
  "else": {
    "prefix": "else",
    "body": [
      "else",
      "{",
      "\t$1",
      "}"
    ]
  },
  "else if": {
    "prefix": "else if",
    "body": [
      "else if ($1)",
      "{",
      "\t$2",
      "}"
    ]
  },
  "enum": {
    "prefix": "enum",
    "body": [
      "enum ${MyEnum}",
      "{",
      "\t$1",
      "};"
    ]
  },
  "enum class": {
    "prefix": "enum class",
    "body": "enum class ${MyClass} { };"
  },
  "class": {
    "prefix": "class",
    "body": [
      "class ${MyClass}",
      "{",
      "public:",
      "\t${MyClass}();",
      "\t${MyClass}(${MyClass} &&) = default;",
      "\t${MyClass}(const ${MyClass} &) = default;",
      "\t${MyClass} &operator=(${MyClass} &&) = default;",
      "\t${MyClass} &operator=(const ${MyClass} &) = default;",
      "\t~${MyClass}();",
      "",
      "private:",
      "\t$1",
      "};",
      "",
      "${MyClass}::${MyClass}()",
      "{",
      "}",
      "",
      "${MyClass}::~${MyClass}()",
      "{",
      "}"
    ]
  },
  "classi": {
    "prefix": "classi",
    "body": [
      "class ${MyClass}",
      "{",
      "public:",
      "\t${MyClass}() = default;",
      "\t${MyClass}(${MyClass} &&) = default;",
      "\t${MyClass}(const ${MyClass} &) = default;",
      "\t${MyClass} &operator=(${MyClass} &&) = default;",
      "\t${MyClass} &operator=(const ${MyClass} &) = default;",
      "\t~${MyClass}() = default;",
      "",
      "private:",
      "\t$1",
      "};"
    ]
  },
  "interface": {
    "prefix": "interface",
    "body": [
      "__interface I${Interface}",
      "{",
      "\t$1",
      "};"
    ]
  },
  "namespace": {
    "prefix": "namespace",
    "body": [
      "namespace ${MyNamespace}",
      "{",
      "\t$1",
      "}"
    ]
  },
  "#ifdef": {
    "prefix": "#ifdef",
    "body": [
      "#ifdef ${DEBUG}",
      "$1",
      "#endif // ${DEBUG}"
    ]
  },
  "#ifndef": {
    "prefix": "#ifndef",
    "body": [
      "#ifndef ${1:1}",
      "$2",
      "#endif // !$1"
    ]
  },
  "#if": {
    "prefix": "#if",
    "body": [
      "#ifdef ${1:0}",
      "$2",
      "#endif // $1"
    ]
  },
  "struct": {
    "prefix": "struct",
    "body": [
      "struct ${MyStruct}",
      "{",
      "\t$1",
      "};"
    ]
  },
  "switch": {
    "prefix": "switch",
    "body": [
      "switch (${switch_on})",
      "{",
      "default:",
      "\tbreak;$1",
      "}"
    ]
  },
  "try": {
    "prefix": "try",
    "body": [
      "try",
      "{",
      "",
      "}",
      "catch (const std::exception&)",
      "{",
      "\t$1",
      "}"
    ]
  },
  "union": {
    "prefix": "union",
    "body": [
      "union ${MyUnion}",
      "{",
      "\t$1",
      "};"
    ]
  },
  "cout": {
    "prefix": "cout",
    "body": "std::cout << \"${1:/* message */}\" << std::endl;"
  },
  "#inc": {
    "prefix": "#inc",
    "body": "#include \"$1\""
  },
  "#inc<": {
    "prefix": "#inc<",
    "body": "#include <$1>"
  },
  "#def": {
    "prefix": "#def",
    "body": "#define \"$1\" \"$2\" "
  },
  "main": {
    "prefix": "main",
    "body": [
      "int main(int argc, const char** argv) {",
      "\treturn 0;",
      "}"
    ]
  }
}
