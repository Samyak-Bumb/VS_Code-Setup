// Created/Written By Samyak Bumb
{
  "import": {
    "prefix": "imp",
    "body": "import ${2:moduleName} from '${1:module}'$0"
  },
  "importNoModuleName": {
    "prefix": "imn",
    "body": "import '${1:module}'$0"
  },
  "importDestructing": {
    "prefix": "imd",
    "body": "import { $2 } from '${1:module}'$0"
  },
  "importEverything": {
    "prefix": "ime",
    "body": "import * as ${2:alias} from '${1:module}'$0"
  },
  "importAs": {
    "prefix": "ima",
    "body": "import { ${2:originalName} as ${3:alias} } from '${1:module}'$0"
  },
  "exportDefault": {
    "prefix": "exp",
    "body": "export default $1$0"
  },
  "exportDestructing": {
    "prefix": "exd",
    "body": "export { $2 } from '${1:module}'$0"
  },
  "exportAs": {
    "prefix": "exa",
    "body": "export { ${2:originalName} as ${3:alias} } from '${1:module}'$0"
  },
  "exportNamedFunction": {
    "prefix": "enf",
    "body": [
      "export const ${1:functionName} = (${2:params}) => {",
      "\t$0",
      "}",
      ""
    ]
  },
  "exportDefaultFunction": {
    "prefix": "edf",
    "body": [
      "export default (${1:params}) => {",
      "\t$0",
      "}",
      ""
    ]
  },
  "method": {
    "prefix": "met",
    "body": [
      "${1:methodName} = (${2:params}) => {",
      "\t${0}",
      "}",
      ""
    ]
  },
  "propertyGet": {
    "prefix": "pge",
    "body": [
      "get ${1:propertyName}() {",
      "\treturn this.${0}",
      "}\n"
    ]
  },
  "propertySet": {
    "prefix": "pse",
    "body": [
      "set ${1:propertyName}(${2:value}) {",
      "\t${0}",
      "}\n"
    ]
  },
  "forEach": {
    "prefix": "fre",
    "body": [
      "${1:array}.forEach(${2:currentItem} => {",
      "\t${0}",
      "})\n"
    ]
  },
  "forOf": {
    "prefix": "fof",
    "body": [
      "for(let ${1:item} of ${2:object}) {",
      "\t${0}",
      "}\n"
    ]
  },
  "forIn": {
    "prefix": "fin",
    "body": [
      "for(let ${1:item} in ${2:object}) {",
      "\t${0}",
      "}\n"
    ]
  },
  "anonymousFunction": {
    "prefix": "anfn",
    "body": [
      "(${1:params}) => {",
      "\t${2}",
      "}"
    ]
  },
  "namedFunction": {
    "prefix": "nfn",
    "body": [
      "const ${1:name} = (${2:params}) => {",
      "\t${3}",
      "}\n"
    ]
  },
  "destructingObject": {
    "prefix": "dob",
    "body": "const {${1:propertyName}} = ${2:objectToDestruct}"
  },
  "destructingArray": {
    "prefix": "dar",
    "body": "const [${1:propertyName}] = ${2:arrayToDestruct}"
  },
  "setInterval": {
    "prefix": "sti",
    "body": [
      "setInterval(() => {",
      "\t${2}",
      "}, ${0:intervalInms})\n",
    ]
  },
  "setTimeOut": {
    "prefix": "sto",
    "body": [
      "setTimeout(() => {",
      "\t${2}",
      "}, ${1:delayInms})\n",
    ]
  },
  "promise": {
    "prefix": "prom",
    "body": [
      "return new Promise((resolve, reject) => {",
      "\t${1}",
      "})\n",
    ]
  },
  "consoleAssert": {
    "prefix": "cas",
    "body": "console.assert(${1:expression}, ${2:object})"
  },
  "consoleClear": {
    "prefix": "ccl",
    "body": "console.clear()"
  },
  "consoleCount": {
    "prefix": "cco",
    "body": "console.count(${1:label})"
  },
  "consoleDir": {
    "prefix": "cdi",
    "body": "console.dir(${1:object})"
  },
  "consoleError": {
    "prefix": "cer",
    "body": "console.error(${1:object})"
  },
  "consoleGroup": {
    "prefix": "cgr",
    "body": "console.group(\"${1:label}\")"
  },
  "consoleGroupEnd": {
    "prefix": "cge",
    "body": "console.groupEnd()"
  },
  "consoleLog": {
    "prefix": "clg",
    "body": "console.log(${1:object})"
  },
  "consoleTrace": {
    "prefix": "ctr",
    "body": "console.trace(${1:object})"
  },
  "consoleLogObject": {
    "prefix": "clo",
    "body": "console.log(`${1:object}`, ${1:object})"
  },
  "consoleTime": {
    "prefix": "ctm",
    "body": "console.time(`${1:object}`)"
  },
  "consoleTimeEnd": {
    "prefix": "cte",
    "body": "console.timeEnd(`${1:object}`)"
  },
  "consoleWarn": {
    "prefix": "cwa",
    "body": "console.warn(${1:object})"
  },
  "consoleInfo": {
    "prefix": "cin",
    "body": "console.info(${1:object})"
  },
  "destructProps": {
    "prefix": "cp",
    "body": [
      "const { $1 } = this.props"
    ]
  },
  "destructState": {
    "prefix": "cs",
    "body": [
      "const { $1 } = this.state"
    ]
  },
  "import React": {
    "prefix": "imr",
    "body": "import React from 'react'\n",
  },
  "import ReactDOM": {
    "prefix": "imrd",
    "body": "import ReactDOM from 'react-dom'\n",
  },
  "import React, { Component }": {
    "prefix": "imrc",
    "body": "import React, { Component } from 'react'\n"
  },
  "import React, { Component } & PropTypes": {
    "prefix": "imrcp",
    "body": [
      "import React, { Component } from 'react'",
      "import PropTypes from 'prop-types'",
      ""
    ]
  },
  "import React, { PureComponent }": {
    "prefix": "imrpc",
    "body": "import React, { PureComponent } from 'react'\n"
  },
  "import React, { PureComponent } & PropTypes": {
    "prefix": "imrpcp",
    "body": [
      "import React, { PureComponent } from 'react'",
      "import PropTypes from 'prop-types'\n"
    ]
  },
  "import React, { memo }": {
    "prefix": "imrm",
    "body": "import React, { memo } from 'react'\n"
  },
  "import React, { memo } & PropTypes": {
    "prefix": "imrmp",
    "body": [
      "import React, { memo } from 'react'",
      "import PropTypes from 'prop-types'\n",
    ]
  },
  "import React, {useState}": {
    "prefix": "imrs",
    "body": "import React, { useState } from 'react'\n"
  },
  "import React, {useEffect}": {
    "prefix": "imre",
    "body": "import React, { useEffect } from 'react'\n"
  },
  "import React, {useRef}": {
    "prefix": "imrr",
    "body": "import React, { useRef } from 'react'\n"
  },
  "import React, {useState, useEffect}": {
    "prefix": "imrse",
    "body": "import React, { useState, useEffect } from 'react'\n"
  },
  "import PropTypes": {
    "prefix": "impt",
    "body": "import PropTypes from 'prop-types'\n"
  },
  "import React Router": {
    "prefix": "imrr",
    "body": "import { BrowserRouter as Router, Route, NavLink } from 'react-router-dom'\n"
  },
  "import React Browser Router": {
    "prefix": "imbr",
    "body": "import { BrowserRouter as Router } from 'react-router-dom'\n"
  },
  "import React Browser Router - Route": {
    "prefix": "imbrr",
    "body": "import { Route } from 'react-router-dom'\n"
  },
  "import React Browser Router - Route Combo": {
    "prefix": "imbrc",
    "body": "import { Route, Switch, NavLink, Link } from 'react-router-dom'\n"
  },
  "import React Browser Router - Switch": {
    "prefix": "imbrs",
    "body": "import { Switch } from 'react-router-dom'\n"
  },
  "import React Browser Router - Link": {
    "prefix": "imbrl",
    "body": "import { Link } from 'react-router-dom'\n"
  },
  "import React Browser Router - NavLink": {
    "prefix": "imbrnl",
    "body": "import { NavLink } from 'react-router-dom'\n"
  },
  "import redux statement": {
    "prefix": "redux",
    "body": "import { connect } from 'react-redux'\n"
  },
  "reactClassCompoment": {
    "prefix": "rcc",
    "body": [
      "import React, { Component } from 'react'\n",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}\n"
    ]
  },
  "reactClassExportComponent": {
    "prefix": "rce",
    "body": [
      "import React, { Component } from 'react'\n",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}\n",
      "export default ${1:${TM_FILENAME_BASE}}\n"
    ]
  },
  "reactFunctionalExportComponent": {
    "prefix": "rfce",
    "body": [
      "import React from 'react'",
      "",
      "function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ]
  },
  "reactFunctionalComponent": {
    "prefix": "rfc",
    "body": [
      "import React from 'react'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      ""
    ]
  },
  "reactFunctionalComponentWithPropTypes": {
    "prefix": "rfcp",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "function ${1:${TM_FILENAME_BASE}}(props) {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      "",
      ""
    ]
  },
  "reactArrowFunctionExportComponent": {
    "prefix": "rafce",
    "body": [
      "import React from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ]
  },
  "reactArrowFunctionComponent": {
    "prefix": "rafc",
    "body": [
      "import React from 'react'",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      ""
    ]
  },
  "reactArrowFunctionComponentWithPropTypes": {
    "prefix": "rafcp",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = props => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ]
  },
  "reactClassExportComponentWithPropTypes": {
    "prefix": "rcep",
    "body": [
      "import React, { Component } from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\tstatic propTypes = {",
      "",
      "\t}",
      "",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ]
  },
  "reactClassPureComponent": {
    "prefix": "rpc",
    "body": [
      "import React, { PureComponent } from 'react'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      ""
    ]
  },
  "reactClassExportPureComponent": {
    "prefix": "rpce",
    "body": [
      "import React, { PureComponent } from 'react'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:$TM_FILENAME_BASE}",
      ""
    ]
  },
  "reactClassPureComponentWithPropTypes": {
    "prefix": "rpcp",
    "body": [
      "import React, { PureComponent } from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "\tstatic propTypes = {",
      "",
      "\t}",
      "",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      ""
    ]
  },
  "reactFunctionMemoComponent": {
    "prefix": "rmc",
    "body": [
      "import React, { memo } from 'react'",
      "",
      "export default memo(function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "})",
      ""
    ]
  },
  "reactFunctionMemoComponentWithPropTypes": {
    "prefix": "rmcp",
    "body": [
      "import React, { memo } from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = memo(function ${1:${TM_FILENAME_BASE}}(props) {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "})",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ]
  },
  "reactClassCompomentPropTypes": {
    "prefix": "rccp",
    "body": [
      "import React, { Component } from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\tstatic propTypes = {",
      "\t\t${2:prop}: ${3:PropTypes}",
      "\t}",
      "",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      ""
    ]
  },
  "reactClassCompomentRedux": {
    "prefix": "rcredux",
    "body": [
      "import React, { Component } from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "const mapStateToProps = (state) => ({",
      "\t",
      "})",
      "",
      "const mapDispatchToProps = {",
      "\t",
      "}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})",
      ""
    ]
  },
  "reactClassCompomentReduxPropTypes": {
    "prefix": "rcreduxp",
    "body": [
      "import React, { Component } from 'react'",
      "import PropTypes from 'prop-types'",
      "import { connect } from 'react-redux'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\tstatic propTypes = {",
      "\t\t${2:prop}: ${3:PropTypes}",
      "\t}",
      "",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "const mapStateToProps = (state) => ({",
      "\t",
      "})",
      "",
      "const mapDispatchToProps = {",
      "\t",
      "}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})",
      ""
    ]
  },
  "reactFunctionalCompomentRedux": {
    "prefix": "rfcredux",
    "body": [
      "import React from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = (props) => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "const mapStateToProps = (state) => ({",
      "\t",
      "})",
      "",
      "const mapDispatchToProps = {",
      "\t",
      "}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})",
      ""
    ]
  },
  "reactFunctionalCompomentReduxPropTypes": {
    "prefix": "rfcreduxp",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "import { connect } from 'react-redux'",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = (props) => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "\t${2:props}: ${3:PropTypes}",
      "}",
      "",
      "const mapStateToProps = (state) => ({",
      "\t",
      "})",
      "",
      "const mapDispatchToProps = {",
      "\t",
      "}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})",
      ""
    ]
  },
  "mappingToProps": {
    "prefix": "reduxmap",
    "body": [
      "const mapStateToProps = (state) => ({",
      "\t${1}",
      "})",
      "",
      "const mapDispatchToProps = {",
      "\t",
      "}",
      ""
    ]
  },
  "classConstructor": {
    "prefix": "rconst",
    "body": [
      "constructor(props) {",
      "\tsuper(props)",
      "",
      "\tthis.state = {",
      "\t\t $0",
      "\t}",
      "}",
      ""
    ]
  },
  "emptyState": {
    "prefix": "est",
    "body": [
      "state = {",
      "\t$1",
      "}",
      ""
    ]
  },
  "componentWillMount": {
    "prefix": "cwm",
    "body": [
      "componentWillMount() {",
      "\t$0",
      "}",
      ""
    ]
  },
  "componentDidMount": {
    "prefix": "cdm",
    "body": [
      "componentDidMount() {",
      "\t$0",
      "}",
      ""
    ]
  },
  "componentWillReceiveProps": {
    "prefix": "cwr",
    "body": [
      "componentWillReceiveProps(nextProps) {",
      "\t$0",
      "}",
      ""
    ]
  },
  "shouldComponentUpdate": {
    "prefix": "scu",
    "body": [
      "shouldComponentUpdate(nextProps, nextState) {",
      "\t$0",
      "}",
      ""
    ]
  },
  "componentWillUpdate": {
    "prefix": "cwup",
    "body": [
      "componentWillUpdate(nextProps, nextState) {",
      "\t$0",
      "}",
      ""
    ]
  },
  "componentDidUpdate": {
    "prefix": "cdup",
    "body": [
      "componentDidUpdate(prevProps, prevState) {",
      "\t$0",
      "}",
      ""
    ]
  },
  "componentWillUnmount": {
    "prefix": "cwun",
    "body": [
      "componentWillUnmount() {",
      "\t$0",
      "}",
      ""
    ]
  },
  "getDerivedStateFromProps": {
    "prefix": "gdsfp",
    "body": [
      "static getDerivedStateFromProps(props, state) {",
      "\t${1}",
      "}"
    ]
  },
  "getSnapshotBeforeUpdate": {
    "prefix": "gsbu",
    "body": [
      "getSnapshotBeforeUpdate = (prevProps, prevState) => {",
      "\t$0",
      "}",
      ""
    ]
  },
  "componentRender": {
    "prefix": "ren",
    "body": [
      "render() {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}"
    ]
  },
  "createContext": {
    "prefix": "rcontext",
    "body": [
      "const ${1:contextName} = React.createContext()",
      ""
    ]
  },
  "createRef": {
    "prefix": "cref",
    "body": [
      "this.${1:refName}Ref = React.createRef()",
      ""
    ]
  },
  "forwardRef": {
    "prefix": "fref",
    "body": [
      "const ref = React.createRef()",
      ""
    ]
  },
  "componentSetStateObject": {
    "prefix": "sst",
    "body": "this.setState({$0})"
  },
  "componentSetStateFunc": {
    "prefix": "ssf",
    "body": [
      "this.setState((state, props) => { return { $0 }})",
      ""
    ]
  },
  "componentProps": {
    "prefix": "props",
    "body": "this.props.$0"
  },
  "componentState": {
    "prefix": "state",
    "body": "this.state.$0"
  },
  "bindThis": {
    "prefix": "bnd",
    "body": "this.${1:methodName} = this.${1:methodName}.bind(this)$0"
  },
  "reduxAction": {
    "prefix": "rxaction",
    "body": [
      "export const ${1:actionName} = (payload) => ({",
      "\ttype: ${3:type},",
      "\tpayload",
      "})",
      ""
    ]
  },
  "reduxConst": {
    "prefix": "rxconst",
    "body": "export const ${1:constantName} = '${1:constantName}'"
  },
  "reduxReducer": {
    "prefix": "rxreducer",
    "body": [
      "const initialState = {",
      "",
      "}",
      "",
      "export default (state = initialState, { type, payload }) => {",
      "\tswitch (type) {",
      "",
      "\tcase ${1:typeName}:",
      "\t\treturn { ...state, ...payload }",
      "",
      "\tdefault:",
      "\t\treturn state",
      "\t}",
      "}",
      ""
    ]
  },
  "reduxSelector": {
    "prefix": "rxselect",
    "body": [
      "import { createSelector } from 'reselect'",
      "",
      "export const ${1:selectorName} = state => state.${2:selector}",
      ""
    ]
  },
  "reduxSlice": {
    "prefix": "rxslice",
    "body": [
      "import { createSlice } from '@reduxjs/toolkit'",
      "",
      "const initialState = {",
      "",
      "}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = createSlice({",
      "\tname: ${2:sliceName},",
      "\tinitialState,",
      "\treducers: {",
      "\t",
      "\t}",
      "});",
      "",
      "export const {",
      "",
      "} = ${1:${TM_FILENAME_BASE}}.actions",
      "export default ${1:${TM_FILENAME_BASE}}.reducer"
    ]
  },
  "reactNativeComponent": {
    "prefix": "rnc",
    "body": [
      "import React, { Component } from 'react'",
      "import { Text, View } from 'react-native'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text> ${2:textInComponent} </Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}",
      ""
    ]
  },
  "reactNativeComponentWithStyles": {
    "prefix": "rncs",
    "body": [
      "import React, { Component } from 'react'",
      "import { Text, StyleSheet, View } from 'react-native'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text> ${2:textInComponent} </Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "const styles = StyleSheet.create({})",
      ""
    ]
  },
  "reactNativeComponentExport": {
    "prefix": "rnce",
    "body": [
      "import React, { Component } from 'react'",
      "import { Text, View } from 'react-native'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text> ${2:textInComponent} </Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ]
  },
  "reactNativePureComponent": {
    "prefix": "rnpc",
    "body": [
      "import React, { PureComponent } from 'react'",
      "import { Text, View } from 'react-native'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text> ${2:textInComponent} </Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}",
      ""
    ]
  },
  "reactNativePureComponentExport": {
    "prefix": "rnpce",
    "body": [
      "import React, { PureComponent } from 'react'",
      "import { Text, View } from 'react-native'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text> ${2:textInComponent} </Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ]
  },
  "reactNativeClassComponentRedux": {
    "prefix": "rncredux",
    "body": [
      "import React, { Component } from 'react'",
      "import { View, Text } from 'react-native'",
      "import PropTypes from 'prop-types'",
      "import { connect } from 'react-redux'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\tstatic propTypes = {",
      "\t\t${2:prop}: ${3:PropTypes}",
      "\t}",
      "",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text> ${2:textInComponent} </Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "const mapStateToProps = (state) => ({",
      "\t",
      "})",
      "",
      "const mapDispatchToProps = {",
      "\t",
      "}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})",
      ""
    ]
  },
  "reactNativeFunctionalExportComponent": {
    "prefix": "rnfe",
    "body": [
      "import React from 'react'",
      "import { View, Text } from 'react-native'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>$0</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ]
  },
  "reactNativeFunctionalExportComponentWithStyles": {
    "prefix": "rnfes",
    "body": [
      "import React from 'react'",
      "import { StyleSheet, Text, View } from 'react-native'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>$0</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      "",
      "const styles = StyleSheet.create({})",
      ""
    ]
  },
  "reactNativeFunctionalComponent": {
    "prefix": "rnf",
    "body": [
      "import React from 'react'",
      "import { View, Text } from 'react-native'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>$0</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      ""
    ]
  },
  "reactNativeFunctionalComponentWithStyles": {
    "prefix": "rnfs",
    "body": [
      "import React from 'react'",
      "import { StyleSheet, Text, View } from 'react-native'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>$0</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "const styles = StyleSheet.create({})",
      ""
    ]
  },
  "reactNativeImport": {
    "prefix": "imrn",
    "body": "import { ${1:moduleName} } from 'react-native'"
  },
  "reactNativeStyles": {
    "prefix": "rnstyle",
    "body": [
      "const styles = StyleSheet.create({",
      "\t${1:style}",
      "})",
      ""
    ]
  },
  "propTypeArray": {
    "prefix": "pta",
    "body": "PropTypes.array,"
  },
  "propTypeArrayRequired": {
    "prefix": "ptar",
    "body": "PropTypes.array.isRequired,"
  },
  "propTypeBool": {
    "prefix": "ptb",
    "body": "PropTypes.bool,"
  },
  "propTypeBoolRequired": {
    "prefix": "ptbr",
    "body": "PropTypes.bool.isRequired,"
  },
  "propTypeFunc": {
    "prefix": "ptf",
    "body": "PropTypes.func,"
  },
  "propTypeFuncRequired": {
    "prefix": "ptfr",
    "body": "PropTypes.func.isRequired,"
  },
  "propTypeNumber": {
    "prefix": "ptn",
    "body": "PropTypes.number,"
  },
  "propTypeNumberRequired": {
    "prefix": "ptnr",
    "body": "PropTypes.number.isRequired,"
  },
  "propTypeObject": {
    "prefix": "pto",
    "body": "PropTypes.object,"
  },
  "propTypeObjectRequired": {
    "prefix": "ptor",
    "body": "PropTypes.object.isRequired,"
  },
  "propTypeString": {
    "prefix": "pts",
    "body": "PropTypes.string,"
  },
  "propTypeStringRequired": {
    "prefix": "ptsr",
    "body": "PropTypes.string.isRequired,"
  },
  "propTypeNode": {
    "prefix": "ptnd",
    "body": "PropTypes.node,"
  },
  "propTypeNodeRequired": {
    "prefix": "ptndr",
    "body": "PropTypes.node.isRequired,"
  },
  "propTypeElement": {
    "prefix": "ptel",
    "body": "PropTypes.element,"
  },
  "propTypeElementRequired": {
    "prefix": "ptelr",
    "body": "PropTypes.element.isRequired,"
  },
  "propTypeInstanceOf": {
    "prefix": "pti",
    "body": "PropTypes.instanceOf($0),"
  },
  "propTypeInstanceOfRequired": {
    "prefix": "ptir",
    "body": "PropTypes.instanceOf($0).isRequired,"
  },
  "propTypeEnum": {
    "prefix": "pte",
    "body": "PropTypes.oneOf(['$0']),"
  },
  "propTypeEnumRequired": {
    "prefix": "pter",
    "body": "PropTypes.oneOf(['$0']).isRequired,"
  },
  "propTypeOneOfType": {
    "prefix": "ptet",
    "body": [
      "PropTypes.oneOfType([",
      "\t$0",
      "]),"
    ]
  },
  "propTypeOneOfTypeRequired": {
    "prefix": "ptetr",
    "body": [
      "PropTypes.oneOfType([",
      "\t$0",
      "]).isRequired,"
    ]
  },
  "propTypeArrayOf": {
    "prefix": "ptao",
    "body": "PropTypes.arrayOf($0),"
  },
  "propTypeArrayOfRequired": {
    "prefix": "ptaor",
    "body": "PropTypes.arrayOf($0).isRequired,"
  },
  "propTypeObjectOf": {
    "prefix": "ptoo",
    "body": "PropTypes.objectOf($0),"
  },
  "propTypeObjectOfRequired": {
    "prefix": "ptoor",
    "body": "PropTypes.objectOf($0).isRequired,"
  },
  "propTypeShape": {
    "prefix": "ptsh",
    "body": [
      "PropTypes.shape({",
      "\t$0",
      "}),"
    ]
  },
  "propTypeShapeRequired": {
    "prefix": "ptshr",
    "body": [
      "PropTypes.shape({",
      "\t$0",
      "}).isRequired,"
    ]
  },
  "propTypeExact": {
    "prefix": "ptex",
    "body": [
      "PropTypes.exact({",
      "\t$0",
      "}),"
    ]
  },
  "propTypeExactRequired": {
    "prefix": "ptexr",
    "body": [
      "PropTypes.exact({",
      "\t$0",
      "}).isRequired,"
    ]
  },
  "staticPropTpyes": {
    "prefix": "ptypes",
    "body": [
      "static propTypes = {",
      "$0",
      "}",
      ""
    ]
  },
  "propTypeAny": {
    "prefix": "ptany",
    "body": "PropTypes.any,"
  },
  "Comment Big Block": {
    "prefix": "cmmb",
    "body": [
      "/**",
      " * ${0}",
      " */"
    ]
  },
  "describeBlock": {
    "prefix": "desc",
    "body": [
      "describe('$1', () => {",
      "\t$0",
      "})",
      ""
    ]
  },
  "testBlock": {
    "prefix": "test",
    "body": [
      "test('should $1', () => {",
      "\t$0",
      "})",
      ""
    ]
  },
  "testAsyncBlock": {
    "prefix": "testa",
    "body": [
      "test('should $1', async () => {",
      "\t$0",
      "})",
      ""
    ]
  },
  "itBlock": {
    "prefix": "tit",
    "body": [
      "it('should $1', () => {",
      "\t$0",
      "})",
      ""
    ]
  },
  "itAsyncBlock": {
    "prefix": "tita",
    "body": [
      "it('should $1', async () => {",
      "\t$0",
      "})",
      ""
    ]
  },
  "setupReactTest": {
    "prefix": "stest",
    "body": [
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "",
      "import { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "\tconst defaultProps = {}",
      "\tconst wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)",
      "",
      "\ttest('render', () => {",
      "\t\texpect(wrapper).toMatchSnapshot()",
      "\t})",
      "})",
      ""
    ]
  },
  "setupReactNativeTest": {
    "prefix": "sntest",
    "body": [
      "import 'react-native'",
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "",
      "import ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "\tconst defaultProps = {}",
      "\tconst wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)",
      "",
      "\ttest('render', () => {",
      "\t\texpect(wrapper).toMatchSnapshot()",
      "\t})",
      "})",
      ""
    ]
  },
  "setupReactComponentTestWithRedux": {
    "prefix": "srtest",
    "body": [
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "import { Provider } from 'react-redux'",
      "",
      "import store from 'src/store'",
      "import { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "\tconst defaultProps = {}",
      "\tconst wrapper = renderer.create(",
      "\t\t<Provider store={store}>",
      "\t\t <${1:${TM_FILENAME_BASE}} {...defaultProps} />",
      "\t\t</Provider>,",
      "\t)",
      "",
      "\ttest('render', () => {",
      "\t\texpect(wrapper).toMatchSnapshot()",
      "\t})",
      "})",
      ""
    ]
  },
  "setupReactNativeTestWithRedux": {
    "prefix": "snrtest",
    "body": [
      "import 'react-native'",
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "import { Provider } from 'react-redux'",
      "",
      "import store from 'src/store'",
      "import ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "\tconst defaultProps = {}",
      "\tconst wrapper = renderer.create(",
      "\t\t<Provider store={store}>",
      "\t\t\t<${1:${TM_FILENAME_BASE}} {...defaultProps} />",
      "\t\t</Provider>,",
      "\t)",
      "",
      "\ttest('render', () => {",
      "\t\texpect(wrapper).toMatchSnapshot()",
      "\t})",
      "})",
      ""
    ]
  },
  "graphQLForComponent": {
    "prefix": "graphql",
    "body": [
      "import { compose, graphql } from 'react-apollo'",
      ""
    ]
  },
  "exportGraphQL": {
    "prefix": "expgql",
    "body": [
      "export default compose(",
      "\tgraphql(${1:queryOrMutation}, { name: ${2:name} }),",
      ")(${1:${TM_FILENAME_BASE}})"
    ]
  },
  "hocComponentWithRedux": {
    "prefix": "hocredux",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "import { connect } from 'react-redux'",
      "",
      "export const mapStateToProps = state => ({",
      "",
      "})",
      "",
      "export const mapDispatchToProps = {",
      " ",
      "}",
      "",
      "export const ${1:hocComponentName} = (WrappedComponent) => {",
      "\tconst hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
      "",
      "\thocComponent.propTypes = {",
      "\t}",
      "",
      "\treturn hocComponent",
      "}",
      "",
      "export default WrapperComponent => connect(mapStateToProps, mapDispatchToProps)(${1:hocComponentName}(WrapperComponent))",
      ""
    ]
  },
  "hocComponent": {
    "prefix": "hoc",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "export default (WrappedComponent) => {",
      "\tconst hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
      "",
      "\thocComponent.propTypes = {",
      "\t}",
      "",
      "\treturn hocComponent",
      "}",
      ""
    ]
  },
  "useState": {
    "prefix": "useState",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialState})"
    ]
  },
  "useEffect": {
    "prefix": "useEffect",
    "body": [
      "useEffect(() => {",
      "\t${1:effect}",
      "\treturn () => {",
      "\t\t${2:cleanup}",
      "\t}",
      "}, [${3:input}])"
    ]
  },
  "useContext": {
    "prefix": "useContext",
    "body": [
      "const ${1:context} = useContext(${2:contextValue})"
    ]
  },
  "useReducer": {
    "prefix": "useReducer",
    "body": [
      "const [state, dispatch] = useReducer(${1:reducer}, ${2:initialState}, ${3:init})"
    ]
  },
  "useCallback": {
    "prefix": "useCallback",
    "body": [
      "useCallback(",
      "\t() => {",
      "\t\t${1:callback}",
      "\t},",
      "\t[${2:input}],",
      ")"
    ]
  },
  "useMemo": {
    "prefix": "useMemo",
    "body": [
      "useMemo(() => ${1:function}, ${2:input})"
    ]
  },
  "useRef": {
    "prefix": "useRef",
    "body": [
      "const ${1:ref} = useRef(${2:initialValue})"
    ]
  },
  "useImperativeHandle": {
    "prefix": "useImperativeHandle",
    "body": [
      "useImperativeHandle(",
      "\t${1:ref},",
      "\t() => {",
      "\t\t${2:handler}",
      "\t},",
      "\t[${3:input}],",
      ")"
    ]
  },
  "useDebugValue": {
    "prefix": "useDebugValue",
    "body": [
      "useDebugValue(${1:value})"
    ]
  },
  "useLayoutEffect": {
    "prefix": "useLayoutEffect",
    "body": [
      "useLayoutEffect(() => {",
      "\t${1:effect}",
      "\treturn () => {",
      "\t\t${2:cleanup}",
      "\t};",
      "}, [${3:input}])"
    ]
  },
  "useSelector": {
    "prefix": "useSelector",
    "body": [
      "const ${1:state} = useSelector(state => state.${1:state})"
    ]
  },
  "useDispatch": {
    "prefix": "useDispatch",
    "body": [
      "const dispatch = useDispatch(${1:function})"
    ]
  },
  "typeof": {
    "prefix": "tpf",
    "body": [
      "typeof ${0}"
    ]
  },
  "_reactFunctionalExportComponent": {
    "prefix": "_rfce",
    "body": [
      "function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ]
  },
  "_reactFunctionalComponent": {
    "prefix": "_rfc",
    "body": [
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      ""
    ]
  },
  "_reactFunctionalComponentWithPropTypes": {
    "prefix": "_rfcp",
    "body": [
      "import PropTypes from 'prop-types'",
      "",
      "function ${1:${TM_FILENAME_BASE}}(props) {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      "",
      ""
    ]
  },
  "_reactArrowFunctionExportComponent": {
    "prefix": "_rafce",
    "body": [
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ]
  },
  "_reactArrowFunctionComponent": {
    "prefix": "_rafc",
    "body": [
      "export const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      ""
    ]
  },
  "_reactArrowFunctionComponentWithPropTypes": {
    "prefix": "_rafcp",
    "body": [
      "import PropTypes from 'prop-types'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = props => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ]
  },
  "_reactNativeFunctionalExportComponent": {
    "prefix": "_rnfe",
    "body": [
      "import { View, Text } from 'react-native'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>$0</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ]
  },
  "_reactNativeFunctionalExportComponentWithStyles": {
    "prefix": "_rnfes",
    "body": [
      "import { StyleSheet, Text, View } from 'react-native'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>$0</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      "",
      "const styles = StyleSheet.create({})",
      ""
    ]
  },
  "_reactNativeFunctionalComponent": {
    "prefix": "_rnf",
    "body": [
      "import { View, Text } from 'react-native'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>$0</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      ""
    ]
  },
  "_reactNativeFunctionalComponentWithStyles": {
    "prefix": "_rnfs",
    "body": [
      "import { StyleSheet, Text, View } from 'react-native'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>$0</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "const styles = StyleSheet.create({})",
      ""
    ]
  },
  "_setupReactTest": {
    "prefix": "_stest",
    "body": [
      "import renderer from 'react-test-renderer'",
      "",
      "import { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "\tconst defaultProps = {}",
      "\tconst wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)",
      "",
      "\ttest('render', () => {",
      "\t\texpect(wrapper).toMatchSnapshot()",
      "\t})",
      "})",
      ""
    ]
  },
  "_setupReactNativeTest": {
    "prefix": "_sntest",
    "body": [
      "import 'react-native'",
      "import renderer from 'react-test-renderer'",
      "",
      "import ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "\tconst defaultProps = {}",
      "\tconst wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)",
      "",
      "\ttest('render', () => {",
      "\t\texpect(wrapper).toMatchSnapshot()",
      "\t})",
      "})",
      ""
    ]
  },
  "_setupReactComponentTestWithRedux": {
    "prefix": "_srtest",
    "body": [
      "import renderer from 'react-test-renderer'",
      "import { Provider } from 'react-redux'",
      "",
      "import store from 'src/store'",
      "import { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "\tconst defaultProps = {}",
      "\tconst wrapper = renderer.create(",
      "\t\t<Provider store={store}>",
      "\t\t <${1:${TM_FILENAME_BASE}} {...defaultProps} />",
      "\t\t</Provider>,",
      "\t)",
      "",
      "\ttest('render', () => {",
      "\t\texpect(wrapper).toMatchSnapshot()",
      "\t})",
      "})",
      ""
    ]
  },
  "_setupReactNativeTestWithRedux": {
    "prefix": "_snrtest",
    "body": [
      "import 'react-native'",
      "import renderer from 'react-test-renderer'",
      "import { Provider } from 'react-redux'",
      "",
      "import store from 'src/store'",
      "import ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "\tconst defaultProps = {}",
      "\tconst wrapper = renderer.create(",
      "\t\t<Provider store={store}>",
      "\t\t\t<${1:${TM_FILENAME_BASE}} {...defaultProps} />",
      "\t\t</Provider>,",
      "\t)",
      "",
      "\ttest('render', () => {",
      "\t\texpect(wrapper).toMatchSnapshot()",
      "\t})",
      "})",
      ""
    ]
  },
  "_hocComponentWithRedux": {
    "prefix": "_hocredux",
    "body": [
      "import PropTypes from 'prop-types'",
      "import { connect } from 'react-redux'",
      "",
      "export const mapStateToProps = state => ({",
      "",
      "})",
      "",
      "export const mapDispatchToProps = {",
      " ",
      "}",
      "",
      "export const ${1:hocComponentName} = (WrappedComponent) => {",
      "\tconst hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
      "",
      "\thocComponent.propTypes = {",
      "\t}",
      "",
      "\treturn hocComponent",
      "}",
      "",
      "export default WrapperComponent => connect(mapStateToProps, mapDispatchToProps)(${1:hocComponentName}(WrapperComponent))",
      ""
    ]
  },
  "_hocComponent": {
    "prefix": "_hoc",
    "body": [
      "import PropTypes from 'prop-types'",
      "",
      "export default (WrappedComponent) => {",
      "\tconst hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
      "",
      "\thocComponent.propTypes = {",
      "\t}",
      "",
      "\treturn hocComponent",
      "}",
      ""
    ]
  },
  "reactCustomHook": {
    "prefix": "rch",
    "body": [
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "\t$2",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ]
  }
}
