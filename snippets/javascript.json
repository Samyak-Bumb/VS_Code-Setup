// Created/Written By Samyak Bumb
{
  "import": {
    "prefix": "imp",
    "body": "import ${2:moduleName} from '${1:module}';$0"
  },
  "importNoModuleName": {
    "prefix": "imn",
    "body": "import '${1:module}';$0"
  },
  "importDestructing": {
    "prefix": "imd",
    "body": "import{ $2 } from '${1:module}';$0"
  },
  "importEverything": {
    "prefix": "ime",
    "body": "import * as ${2:alias} from '${1:module}';$0"
  },
  "importAs": {
    "prefix": "ima",
    "body": "import{ ${2:originalName} as ${3:alias} } from '${1:module}';$0"
  },
  "require": {
    "prefix": "rqr",
    "body": "require('${1:package}');"
  },
  "requireToConst": {
    "prefix": "req",
    "body": "const ${1:packageName} = require('${1:package}');$0"
  },
  "moduleExports": {
    "prefix": "mde",
    "body": "module.exports ={\n\t$0\n};\n"
  },
  "exportNamedVariable": {
    "prefix": "env",
    "body": "export const ${1:exportVariable} = ${2:localVariable};\n"
  },
  "exportNamedFunction": {
    "prefix": "enf",
    "body": "export const ${1:functionName} = (${2:params}) =>{\n\t$0\n};\n"
  },
  "exportDefaultFunction": {
    "prefix": "edf",
    "body": "export default function ${1:${TM_FILENAME_BASE}}(${2:params}){\n\t$0\n};\n"
  },
  "exportClass": {
    "prefix": "ecl",
    "body": "export default class ${1:className}{\n\t$0\n};\n"
  },
  "exportClassExtends": {
    "prefix": "ece",
    "body": "export default class ${1:className} extends ${2:baseclassName}{\n\t$0\n};\n"
  },
  "constructor": {
    "prefix": "con",
    "body": "constructor(${1:params}){\n\t${0}\n}"
  },
  "method": {
    "prefix": "met",
    "body": "${1:methodName}(${2:params}){\n\t${0}\n}"
  },
  "propertyGet": {
    "prefix": "pge",
    "body": "get ${1:propertyName}(){\n\treturn this.${0};\n}"
  },
  "propertyset": {
    "prefix": "pse",
    "body": "set ${1:propertyName}(${2:value}){\n\t${0};\n}"
  },
  "forEach": {
    "prefix": "fre",
    "body": "${1:array}.forEach(${2:currentItem} =>{\n\t${0}\n});"
  },
  "forOf": {
    "prefix": "fof",
    "body": "for (const ${1:item} of ${2:object}){\n\t${0}\n}"
  },
  "forIn": {
    "prefix": "fin",
    "body": "for (const ${1:item} in ${2:object}){\n\t${0}\n}"
  },
  "anonymousFunction": {
    "prefix": "anfn",
    "body": "(${1:params}) =>{\n\t${2}\n}"
  },
  "namedFunction": {
    "prefix": "nfn",
    "body": "const ${1:name} = (${2:params}) =>{\n\t${3}\n}"
  },
  "destructingObject": {
    "prefix": "dob",
    "body": "const{${2:propertyName}} = ${1:objectToDestruct};"
  },
  "destructingArray": {
    "prefix": "dar",
    "body": "const[${2:propertyName}] = ${1:arrayToDestruct};"
  },
  "setInterval": {
    "prefix": "sti",
    "body": "setInterval(() =>{\n\t${2}\n}, ${0:intervalInms});"
  },
  "setTimeOut": {
    "prefix": "sto",
    "body": "setTimeout(() =>{\n\t${2}\n}, ${1:delayInms});"
  },
  "promise": {
    "prefix": "prom",
    "body": "return new Promise((resolve, reject) =>{\n\t${1}\n});"
  },
  "thenCatch": {
    "prefix": "thenc",
    "body": ".then((${1:result}) =>{\n\t${2}\n}).catch((${3:err}) =>{\n\t${4}\n});"
  },
  "consoleAssert": {
    "prefix": "cas",
    "body": "console.assert(${1:expression}, ${2:object});"
  },
  "consoleClear": {
    "prefix": "ccl",
    "body": "console.clear();"
  },
  "consoleCount": {
    "prefix": "cco",
    "body": "console.count(${1:label});"
  },
  "consoleDebug": {
    "prefix": "cdb",
    "body": "console.debug(${1:object});"
  },
  "consoleDir": {
    "prefix": "cdi",
    "body": "console.dir(${1:object});"
  },
  "consoleError": {
    "prefix": "cer",
    "body": "console.error(${1:object});"
  },
  "consoleGroup": {
    "prefix": "cgr",
    "body": "console.group('${1:label}');"
  },
  "consoleGroupEnd": {
    "prefix": "cge",
    "body": "console.groupEnd();"
  },
  "consoleLog": {
    "prefix": "clg",
    "body": "console.log(${1:object});"
  },
  "consoleLogObject": {
    "prefix": "clo",
    "body": "console.log('${1:object} :>> ', ${1:object});"
  },
  "consoleTrace": {
    "prefix": "ctr",
    "body": "console.trace(${1:object});"
  },
  "consoleWarn": {
    "prefix": "cwa",
    "body": "console.warn(${1:object});"
  },
  "consoleInfo": {
    "prefix": "cin",
    "body": "console.info(${1:object});"
  },
  "consoleTable": {
    "prefix": "clt",
    "body": "console.table(${1:object});"
  },
  "consoleTime": {
    "prefix": "cti",
    "body": "console.time(${1:object});"
  },
  "consoleTimeEnd": {
    "prefix": "cte",
    "body": "console.timeEnd(${1:object});"
  }
}
